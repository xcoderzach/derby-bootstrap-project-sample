// Generated by CoffeeScript 1.3.1
var Model, addListener, derefFn, derefPath, eventRegExp, exports, lookupPath, setupRefWithKey, setupRefWithoutKey, _ref;

eventRegExp = require('../path').eventRegExp;

_ref = require('./util'), derefPath = _ref.derefPath, lookupPath = _ref.lookupPath;

Model = require('../Model');

exports = module.exports = function(model, from, to, key, hardLink) {
  if (!from) {
    throw new Error('Missing `from` in `model.ref(from, to, key)`');
  }
  if (!to) {
    throw new Error('Missing `to` in `model.ref(from, to, key)`');
  }
  if (key) {
    return setupRefWithKey(model, from, to, key, hardLink);
  }
  return setupRefWithoutKey(model, from, to, hardLink);
};

derefFn = function(len, i, path, currPath, hardLink) {
  if (hardLink) {
    return function() {
      return currPath;
    };
  } else {
    return function(method) {
      if (i === len && method in Model.basicMutator) {
        return path;
      } else {
        return currPath;
      }
    };
  }
};

setupRefWithKey = function(model, from, to, key, hardLink) {
  var getter, listeners;
  listeners = [];
  getter = function(lookup, data, path, props, len, i) {
    var curr, currPath, dereffed;
    lookup(to, data);
    dereffed = derefPath(data, to) + '.';
    data.$deref = null;
    dereffed += lookup(key, data);
    curr = lookup(dereffed, data);
    currPath = lookupPath(dereffed, props, i);
    data.$deref = derefFn(len, i, path, currPath, hardLink);
    return [curr, currPath, i];
  };
  addListener(model, from, getter, listeners, "" + to + ".*", function(match) {
    var index, keyPath, remainder;
    keyPath = model.get(key) + '';
    remainder = match[1];
    if (remainder === keyPath) {
      return from;
    }
    index = keyPath.length;
    if (remainder.slice(0, index + 1 || 9e9) === keyPath + '.') {
      remainder = remainder.slice(index + 1);
      return from + '.' + remainder;
    }
    return null;
  });
  addListener(model, from, getter, listeners, key, function(match, mutator, args) {
    if (mutator === 'set') {
      args[1] = model.get(to + '.' + args[1]);
      args.out = model.get(to + '.' + args.out);
    } else if (mutator === 'del') {
      args.out = model.get(to + '.' + args.out);
    }
    return from;
  });
  return getter;
};

setupRefWithoutKey = function(model, from, to, hardLink) {
  var getter, listeners;
  listeners = [];
  getter = function(lookup, data, path, props, len, i) {
    var curr, currPath, dereffed;
    curr = lookup(to, data);
    dereffed = derefPath(data, to);
    currPath = lookupPath(dereffed, props, i);
    data.$deref = derefFn(len, i, path, currPath, hardLink);
    return [curr, currPath, i];
  };
  addListener(model, from, getter, listeners, "" + to + ".*", function(match) {
    return from + '.' + match[1];
  });
  addListener(model, from, getter, listeners, to, function() {
    return from;
  });
  return getter;
};

exports.addListener = addListener = function(model, from, getter, listeners, pattern, callback) {
  var listener, re;
  re = eventRegExp(pattern);
  listener = function(mutator, path, _arguments) {
    var args, fn, _i, _len;
    if (re.test(path)) {
      if (model._getRef(from) !== getter) {
        for (_i = 0, _len = listeners.length; _i < _len; _i++) {
          fn = listeners[_i];
          model.removeListener('mutator', fn);
        }
        return;
      }
      args = _arguments[0].slice();
      args.out = _arguments[1];
      path = callback(re.exec(path), mutator, args);
      if (path === null) {
        return;
      }
      args[0] = path;
      model.emit(mutator, args, args.out, _arguments[2], _arguments[3]);
    }
  };
  listeners.push(listener);
  return model.on('mutator', listener);
};
