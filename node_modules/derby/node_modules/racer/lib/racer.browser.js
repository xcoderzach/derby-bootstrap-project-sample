// Generated by CoffeeScript 1.3.1
var exports, isReady, mergeAll, model;

mergeAll = require('./util').mergeAll;

isReady = model = null;

exports = module.exports = function(racer) {
  return mergeAll(racer, {
    init: function(_arg, socket) {
      var clientId, count, ioUri, item, memory, method, onLoad, startId, _i, _len;
      clientId = _arg[0], memory = _arg[1], count = _arg[2], onLoad = _arg[3], startId = _arg[4], ioUri = _arg[5];
      model = new racer["protected"].Model;
      model._clientId = clientId;
      model._startId = startId;
      model._memory.init(memory);
      model._count = count;
      for (_i = 0, _len = onLoad.length; _i < _len; _i++) {
        item = onLoad[_i];
        method = item.shift();
        model[method].apply(model, item);
      }
      racer.emit('init', model);
      model._setSocket(socket || io.connect(ioUri, {
        'reconnection delay': 100,
        'max reconnection attempts': 20,
        query: 'clientId=' + clientId
      }));
      isReady = true;
      racer.emit('ready', model);
      return racer;
    },
    ready: function(onready) {
      return function() {
        if (isReady) {
          return onready(model);
        }
        return racer.on('ready', onready);
      };
    }
  });
};

exports.decorate = 'racer';

exports.useWith = {
  server: false,
  browser: true
};
