// Generated by CoffeeScript 1.3.1
var DEFAULT_EXPIRY, Serializer;

DEFAULT_EXPIRY = 1000;

module.exports = Serializer = function(_arg) {
  var init;
  this.withEach = _arg.withEach, this.onTimeout = _arg.onTimeout, this.expiry = _arg.expiry, init = _arg.init;
  if (this.onTimeout) {
    if (this.expiry == null) {
      this.expiry = DEFAULT_EXPIRY;
    }
  }
  this._pending = {};
  this._index = init != null ? init : 1;
};

Serializer.prototype = {
  _setWaiter: function() {
    var _this = this;
    if (!this.onTimeout || this._waiter) {
      return;
    }
    return this._waiter = setTimeout(function() {
      _this.onTimeout();
      return _this._clearWaiter();
    }, this.expiry);
  },
  _clearWaiter: function() {
    if (!this.onTimeout) {
      return;
    }
    if (this._waiter) {
      clearTimeout(this._waiter);
      return delete this._waiter;
    }
  },
  add: function(msg, msgIndex, arg) {
    var pending;
    if (msgIndex > this._index) {
      this._pending[msgIndex] = msg;
      this._setWaiter();
      return true;
    }
    if (msgIndex < this._index) {
      return false;
    }
    this.withEach(msg, this._index++, arg);
    this._clearWaiter();
    pending = this._pending;
    while (msg = pending[this._index]) {
      this.withEach(msg, this._index, arg);
      delete pending[this._index++];
    }
    return true;
  },
  setIndex: function(_index) {
    this._index = _index;
  },
  clearPending: function() {
    var i, index, pending, _results;
    index = this._index;
    pending = this._pending;
    _results = [];
    for (i in pending) {
      if (i < index) {
        _results.push(delete pending[i]);
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  }
};
