// Generated by CoffeeScript 1.3.1
var hasKeys, pathRegExp, stringInterface;

pathRegExp = require('../../path').regExp;

hasKeys = require('../../util').hasKeys;

module.exports = stringInterface = function(pubSub) {
  var forwardIndex, intf, reverseIndex;
  forwardIndex = {};
  reverseIndex = {};
  intf = {};
  intf.subscribe = function(subscriberId, str, ackCb) {
    var strings, subscribers;
    subscribers = forwardIndex[str] || (forwardIndex[str] = {});
    subscribers[subscriberId] = true;
    strings = reverseIndex[subscriberId] || (reverseIndex[subscriberId] = {});
    strings[str] = true;
    return typeof ackCb === "function" ? ackCb(null) : void 0;
  };
  intf.publish = function(_arg) {
    var params, subscriberId, subscribers, type;
    type = _arg.type, params = _arg.params;
    switch (type) {
      case 'direct':
        if (subscribers = forwardIndex[params.channel]) {
          for (subscriberId in subscribers) {
            pubSub.emit('direct', subscriberId, params.data);
          }
        }
        break;
      case 'txn':
        if (subscribers = forwardIndex[params.channel]) {
          for (subscriberId in subscribers) {
            pubSub.emit('txn', subscriberId, params.data);
          }
        }
        break;
      case 'addDoc':
        if (subscribers = forwardIndex[params.channel]) {
          for (subscriberId in subscribers) {
            pubSub.emit('addDoc', subscriberId, params.data);
          }
        }
        break;
      case 'rmDoc':
        if (subscribers = forwardIndex[params.channel]) {
          for (subscriberId in subscribers) {
            pubSub.emit('rmDoc', subscriberId, params.data);
          }
        }
    }
  };
  intf.unsubscribe = function(subscriberId, str, ackCb) {
    var strings, subscribers;
    if (typeof str !== 'string') {
      ackCb = str;
      for (str in reverseIndex[subscriberId]) {
        subscribers = forwardIndex[str];
        delete subscribers[subscriberId];
        if (!hasKeys(subscribers)) {
          delete forwardIndex[str];
        }
      }
      delete reverseIndex[subscriberId];
    } else {
      strings = reverseIndex[subscriberId];
      delete strings[str];
      if (!hasKeys(strings)) {
        delete reverseIndex[subscriberId];
      }
      subscribers = forwardIndex[str];
      delete subscribers[subscriberId];
      if (!hasKeys(subscribers)) {
        delete forwardIndex[str];
      }
    }
    return typeof ackCb === "function" ? ackCb(null) : void 0;
  };
  intf.hasSubscriptions = function(subscriberId) {
    return subscriberId in reverseIndex;
  };
  intf.subscribedTo = function(subscriberId, str) {
    var strings;
    if (!(strings = reverseIndex[subscriberId])) {
      return false;
    }
    return str in strings;
  };
  return intf;
};
